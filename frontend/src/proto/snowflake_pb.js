// source: snowflake.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var proto = {};

goog.exportSymbol('de.phyrone.kiwi.snowflake.SnowflakeRequest', null, proto);
goog.exportSymbol('de.phyrone.kiwi.snowflake.SnowflakeResponse', null, proto);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.de.phyrone.kiwi.snowflake.SnowflakeRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.de.phyrone.kiwi.snowflake.SnowflakeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.de.phyrone.kiwi.snowflake.SnowflakeRequest.displayName =
		'proto.de.phyrone.kiwi.snowflake.SnowflakeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.de.phyrone.kiwi.snowflake.SnowflakeResponse = function (opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		proto.de.phyrone.kiwi.snowflake.SnowflakeResponse.repeatedFields_,
		null
	);
};
goog.inherits(proto.de.phyrone.kiwi.snowflake.SnowflakeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.de.phyrone.kiwi.snowflake.SnowflakeResponse.displayName =
		'proto.de.phyrone.kiwi.snowflake.SnowflakeResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.de.phyrone.kiwi.snowflake.SnowflakeRequest.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.de.phyrone.kiwi.snowflake.SnowflakeRequest.toObject(opt_includeInstance, this);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.de.phyrone.kiwi.snowflake.SnowflakeRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.de.phyrone.kiwi.snowflake.SnowflakeRequest.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				count: jspb.Message.getFieldWithDefault(msg, 1, 0)
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.de.phyrone.kiwi.snowflake.SnowflakeRequest}
 */
proto.de.phyrone.kiwi.snowflake.SnowflakeRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.de.phyrone.kiwi.snowflake.SnowflakeRequest();
	return proto.de.phyrone.kiwi.snowflake.SnowflakeRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.de.phyrone.kiwi.snowflake.SnowflakeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.de.phyrone.kiwi.snowflake.SnowflakeRequest}
 */
proto.de.phyrone.kiwi.snowflake.SnowflakeRequest.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {number} */ (reader.readUint32());
				msg.setCount(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.de.phyrone.kiwi.snowflake.SnowflakeRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.de.phyrone.kiwi.snowflake.SnowflakeRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.de.phyrone.kiwi.snowflake.SnowflakeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.de.phyrone.kiwi.snowflake.SnowflakeRequest.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getCount();
	if (f !== 0) {
		writer.writeUint32(1, f);
	}
};

/**
 * optional uint32 count = 1;
 * @return {number}
 */
proto.de.phyrone.kiwi.snowflake.SnowflakeRequest.prototype.getCount = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.de.phyrone.kiwi.snowflake.SnowflakeRequest} returns this
 */
proto.de.phyrone.kiwi.snowflake.SnowflakeRequest.prototype.setCount = function (value) {
	return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.de.phyrone.kiwi.snowflake.SnowflakeResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.de.phyrone.kiwi.snowflake.SnowflakeResponse.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.de.phyrone.kiwi.snowflake.SnowflakeResponse.toObject(opt_includeInstance, this);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.de.phyrone.kiwi.snowflake.SnowflakeResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.de.phyrone.kiwi.snowflake.SnowflakeResponse.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				snowflakesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.de.phyrone.kiwi.snowflake.SnowflakeResponse}
 */
proto.de.phyrone.kiwi.snowflake.SnowflakeResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.de.phyrone.kiwi.snowflake.SnowflakeResponse();
	return proto.de.phyrone.kiwi.snowflake.SnowflakeResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.de.phyrone.kiwi.snowflake.SnowflakeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.de.phyrone.kiwi.snowflake.SnowflakeResponse}
 */
proto.de.phyrone.kiwi.snowflake.SnowflakeResponse.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var values = /** @type {!Array<number>} */ (
					reader.isDelimited() ? reader.readPackedSfixed64() : [reader.readSfixed64()]
				);
				for (var i = 0; i < values.length; i++) {
					msg.addSnowflakes(values[i]);
				}
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.de.phyrone.kiwi.snowflake.SnowflakeResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.de.phyrone.kiwi.snowflake.SnowflakeResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.de.phyrone.kiwi.snowflake.SnowflakeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.de.phyrone.kiwi.snowflake.SnowflakeResponse.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getSnowflakesList();
	if (f.length > 0) {
		writer.writePackedSfixed64(1, f);
	}
};

/**
 * repeated sfixed64 snowflakes = 1;
 * @return {!Array<number>}
 */
proto.de.phyrone.kiwi.snowflake.SnowflakeResponse.prototype.getSnowflakesList = function () {
	return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.de.phyrone.kiwi.snowflake.SnowflakeResponse} returns this
 */
proto.de.phyrone.kiwi.snowflake.SnowflakeResponse.prototype.setSnowflakesList = function (value) {
	return jspb.Message.setField(this, 1, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.de.phyrone.kiwi.snowflake.SnowflakeResponse} returns this
 */
proto.de.phyrone.kiwi.snowflake.SnowflakeResponse.prototype.addSnowflakes = function (
	value,
	opt_index
) {
	return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.de.phyrone.kiwi.snowflake.SnowflakeResponse} returns this
 */
proto.de.phyrone.kiwi.snowflake.SnowflakeResponse.prototype.clearSnowflakesList = function () {
	return this.setSnowflakesList([]);
};

goog.object.extend(exports, proto);
