CREATE TYPE CONTENT_FLAG AS ENUM (
    -- content is not safe for work (NSFW)
    -- this advises users to discretion or avoid the content
    'nsfw',
    --content contains spoilers
    -- this allows users TO avoid being spoiled
    'spoilers',
    -- content that IS GENERATED BY AI
    -- this allows users TO FILTER OUT content that they don't want to see
    'ai',
    -- ragable posts like Politics, Religion, etc.
    -- this is intended to allow users to filter out content that is likely to make them angry
    'rageable',
    -- content that is fake news
    -- example moderator can mark a post as fake news
    'fake_news',
    -- content is managed by a bot or script or something similar
    --  example could be a bot that posts weather updates
    'automated'
    );

CREATE TYPE CHANNEL_TYPE AS ENUM ( 'dummy', 'text','voice', 'feed','announcement', 'stage','forum');

CREATE TYPE REMOTE AS
(
    domain VARCHAR(128),
    id     BIGINT
);

CREATE TABLE content
(
    id       BIGSERIAL NOT NULL
        PRIMARY KEY,
    checksum BYTEA     NULL     DEFAULT NULL,
    public   BOOLEAN   NOT NULL DEFAULT TRUE,
    data     JSONB     NOT NULL DEFAULT '{}'::JSONB
);

CREATE TABLE account
(
    id             BIGSERIAL    NOT NULL
        PRIMARY KEY,
    created_at     TIMESTAMP    NOT NULL DEFAULT NOW(),
    email          VARCHAR(320) NOT NULL
        CONSTRAINT uniq_account_email UNIQUE,
    CONSTRAINT check_account_email_valid CHECK ( email ~ '^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$' ),
    password       TEXT         NULL     DEFAULT NULL,
    session_secret BYTEA        NULL     DEFAULT NULL
);

CREATE TABLE account_key
(
    id         BIGSERIAL NOT NULL
        PRIMARY KEY,
    user_id    BIGINT    NOT NULL
        REFERENCES account (id),
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    key        JSONB     NOT NULL,
    metadata   JSON      NOT NULL DEFAULT '{}'::JSON
);

CREATE TABLE profile
(
    id             BIGSERIAL
        PRIMARY KEY,
    owning_user_id BIGINT      NULL     DEFAULT NULL
        REFERENCES account (id),
    remote         REMOTE      NULL     DEFAULT NULL,
    name           VARCHAR(64) NOT NULL,
    discriminator  SMALLINT    NULL,
    display_name   VARCHAR(64) NOT NULL,
    picture        BIGINT      NULL
        REFERENCES content (id),
    banner         BIGINT      NULL
        REFERENCES content (id),
    metadata       JSONB       NOT NULL DEFAULT '{}'::JSONB,
    CONSTRAINT profile_local_or_remote CHECK ( (remote IS NULL) <> (owning_user_id IS NULL) )
);

CREATE TABLE guild
(
    id         BIGSERIAL
        PRIMARY KEY,
    created_at TIMESTAMP    NOT NULL DEFAULT NOW(),
    name       VARCHAR(128) NOT NULL,
    owner_id   BIGINT       NOT NULL
        REFERENCES account (id)
);


CREATE TABLE channel
(
    id         BIGSERIAL
        PRIMARY KEY,
    guild_id   BIGINT       NOT NULL
        REFERENCES guild (id),
    parent_id  BIGINT
        REFERENCES channel (id),
    created_at TIMESTAMP    NOT NULL DEFAULT NOW(),
    name       VARCHAR(128) NOT NULL,
    type       CHANNEL_TYPE NOT NULL,
    position   INTEGER      NOT NULL,
    topic      VARCHAR,
    metadata   JSON,
    UNIQUE (guild_id, parent_id, name)
);

CREATE TABLE post
(
    id         BIGSERIAL
        PRIMARY KEY,
    channel_id BIGINT    NULL     DEFAULT NULL
        REFERENCES channel (id),
    author_id  BIGINT    NOT NULL
        REFERENCES profile (id),
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
    draft      BOOLEAN            DEFAULT TRUE NOT NULL,
    title      VARCHAR   NOT NULL,
    body       JSONB     NULL     DEFAULT NULL,
    metadata   JSONB     NOT NULL DEFAULT '{}'::JSONB
);

CREATE TABLE post_tag
(
    post_id BIGINT      NOT NULL
        REFERENCES post (id),
    tag     VARCHAR(64) NOT NULL,
    PRIMARY KEY (post_id, tag),
    CHECK ( tag ~ '^[a-z0-9_]+$' )
);

CREATE TABLE post_flag
(
    post_id BIGINT       NOT NULL
        REFERENCES post (id),
    type    CONTENT_FLAG NOT NULL,
    PRIMARY KEY (post_id, type)
);

CREATE TABLE post_attachment
(
    post_id  BIGINT            NOT NULL
        REFERENCES post (id),
    asset_id BIGINT            NOT NULL
        REFERENCES content (id),
    position INTEGER DEFAULT 0 NOT NULL,
    PRIMARY KEY (post_id, asset_id)
);

