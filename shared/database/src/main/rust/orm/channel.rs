//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "channel"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i64,
    pub guild_id: i64,
    pub parent_id: Option<i64>,
    pub created_at: DateTimeWithTimeZone,
    pub name: String,
    pub position: i32,
    pub topic: Option<String>,
    pub metadata: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    GuildId,
    ParentId,
    CreatedAt,
    Name,
    Position,
    Topic,
    Metadata,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    SelfRef,
    Guild,
    Post,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::GuildId => ColumnType::BigInteger.def(),
            Self::ParentId => ColumnType::BigInteger.def().null(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def(),
            Self::Name => ColumnType::String(Some(128u32)).def(),
            Self::Position => ColumnType::Integer.def(),
            Self::Topic => ColumnType::String(None).def().null(),
            Self::Metadata => ColumnType::Json.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::SelfRef => Entity::belongs_to(Entity)
                .from(Column::ParentId)
                .to(Column::Id)
                .into(),
            Self::Guild => Entity::belongs_to(super::guild::Entity)
                .from(Column::GuildId)
                .to(super::guild::Column::Id)
                .into(),
            Self::Post => Entity::has_many(super::post::Entity).into(),
        }
    }
}

impl Related<super::guild::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Guild.def()
    }
}

impl Related<super::post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Post.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
