//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "flyway_schema_history"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub installed_rank: i32,
    pub version: Option<String>,
    pub description: String,
    pub r#type: String,
    pub script: String,
    pub checksum: Option<i32>,
    pub installed_by: String,
    pub installed_on: DateTime,
    pub execution_time: i32,
    pub success: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    InstalledRank,
    Version,
    Description,
    Type,
    Script,
    Checksum,
    InstalledBy,
    InstalledOn,
    ExecutionTime,
    Success,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    InstalledRank,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::InstalledRank => ColumnType::Integer.def(),
            Self::Version => ColumnType::String(Some(50u32)).def().null(),
            Self::Description => ColumnType::String(Some(200u32)).def(),
            Self::Type => ColumnType::String(Some(20u32)).def(),
            Self::Script => ColumnType::String(Some(1000u32)).def(),
            Self::Checksum => ColumnType::Integer.def().null(),
            Self::InstalledBy => ColumnType::String(Some(100u32)).def(),
            Self::InstalledOn => ColumnType::DateTime.def(),
            Self::ExecutionTime => ColumnType::Integer.def(),
            Self::Success => ColumnType::Boolean.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
