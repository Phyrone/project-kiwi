//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "post"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i64,
    pub channel_id: Option<i64>,
    pub author_id: Option<i64>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub draft: bool,
    pub title: String,
    pub body: Option<Json>,
    pub metadata: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    ChannelId,
    AuthorId,
    CreatedAt,
    UpdatedAt,
    Draft,
    Title,
    Body,
    Metadata,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Channel,
    PostAttachment,
    PostFlag,
    PostTag,
    Profile,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::ChannelId => ColumnType::BigInteger.def().null(),
            Self::AuthorId => ColumnType::BigInteger.def().null(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def(),
            Self::UpdatedAt => ColumnType::TimestampWithTimeZone.def(),
            Self::Draft => ColumnType::Boolean.def(),
            Self::Title => ColumnType::String(None).def(),
            Self::Body => ColumnType::JsonBinary.def().null(),
            Self::Metadata => ColumnType::JsonBinary.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Channel => Entity::belongs_to(super::channel::Entity)
                .from(Column::ChannelId)
                .to(super::channel::Column::Id)
                .into(),
            Self::PostAttachment => Entity::has_many(super::post_attachment::Entity).into(),
            Self::PostFlag => Entity::has_many(super::post_flag::Entity).into(),
            Self::PostTag => Entity::has_many(super::post_tag::Entity).into(),
            Self::Profile => Entity::belongs_to(super::profile::Entity)
                .from(Column::AuthorId)
                .to(super::profile::Column::Id)
                .into(),
        }
    }
}

impl Related<super::channel::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Channel.def()
    }
}

impl Related<super::post_attachment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostAttachment.def()
    }
}

impl Related<super::post_flag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostFlag.def()
    }
}

impl Related<super::post_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostTag.def()
    }
}

impl Related<super::profile::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Profile.def()
    }
}

impl Related<super::asset::Entity> for Entity {
    fn to() -> RelationDef {
        super::post_attachment::Relation::Asset.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::post_attachment::Relation::Post.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
