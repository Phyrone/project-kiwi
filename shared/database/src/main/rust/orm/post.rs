//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "post"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i64,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub author_id: i64,
    pub draft: bool,
    pub title: Option<String>,
    pub content: Json,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    CreatedAt,
    UpdatedAt,
    AuthorId,
    Draft,
    Title,
    Content,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Actor,
    PostAttatchment,
    PostFlag,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def(),
            Self::UpdatedAt => ColumnType::TimestampWithTimeZone.def(),
            Self::AuthorId => ColumnType::BigInteger.def(),
            Self::Draft => ColumnType::Boolean.def(),
            Self::Title => ColumnType::String(None).def().null(),
            Self::Content => ColumnType::JsonBinary.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Actor => Entity::belongs_to(super::actor::Entity)
                .from(Column::AuthorId)
                .to(super::actor::Column::Id)
                .into(),
            Self::PostAttatchment => Entity::has_many(super::post_attatchment::Entity).into(),
            Self::PostFlag => Entity::has_many(super::post_flag::Entity).into(),
        }
    }
}

impl Related<super::actor::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Actor.def()
    }
}

impl Related<super::post_attatchment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostAttatchment.def()
    }
}

impl Related<super::post_flag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostFlag.def()
    }
}

impl Related<super::asset::Entity> for Entity {
    fn to() -> RelationDef {
        super::post_attatchment::Relation::Asset.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::post_attatchment::Relation::Post.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
