//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "profile"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i64,
    pub owning_user_id: Option<i64>,
    pub name: String,
    pub discriminator: Option<i16>,
    pub display_name: String,
    pub picture: Option<i64>,
    pub banner: Option<i64>,
    pub metadata: Json,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    OwningUserId,
    Name,
    Discriminator,
    DisplayName,
    Picture,
    Banner,
    Metadata,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Account,
    Asset2,
    Asset1,
    Post,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::OwningUserId => ColumnType::BigInteger.def().null(),
            Self::Name => ColumnType::String(Some(64u32)).def(),
            Self::Discriminator => ColumnType::SmallInteger.def().null(),
            Self::DisplayName => ColumnType::String(Some(64u32)).def(),
            Self::Picture => ColumnType::BigInteger.def().null(),
            Self::Banner => ColumnType::BigInteger.def().null(),
            Self::Metadata => ColumnType::JsonBinary.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Account => Entity::belongs_to(super::account::Entity)
                .from(Column::OwningUserId)
                .to(super::account::Column::Id)
                .into(),
            Self::Asset2 => Entity::belongs_to(super::asset::Entity)
                .from(Column::Banner)
                .to(super::asset::Column::Id)
                .into(),
            Self::Asset1 => Entity::belongs_to(super::asset::Entity)
                .from(Column::Picture)
                .to(super::asset::Column::Id)
                .into(),
            Self::Post => Entity::has_many(super::post::Entity).into(),
        }
    }
}

impl Related<super::account::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Account.def()
    }
}

impl Related<super::post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Post.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
