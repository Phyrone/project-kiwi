//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "asset"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    AssetVariant,
    PostAttachment,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::AssetVariant => Entity::has_many(super::asset_variant::Entity).into(),
            Self::PostAttachment => Entity::has_many(super::post_attachment::Entity).into(),
        }
    }
}

impl Related<super::asset_variant::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AssetVariant.def()
    }
}

impl Related<super::post_attachment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostAttachment.def()
    }
}

impl Related<super::post::Entity> for Entity {
    fn to() -> RelationDef {
        super::post_attachment::Relation::Post.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::post_attachment::Relation::Asset.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
